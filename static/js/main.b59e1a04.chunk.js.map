{"version":3,"sources":["App.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","index.tsx"],"names":["users","UserInfo","user","name","email","className","href","TodoInfo","todo","id","completed","title","classNames","TodoList","todos","map","username","preparedTodos","usersFromServer","userId","find","App","useState","todoTitle","setTodoTitle","selectedUserName","setSelectedUserName","visibleTodos","setVisibleTodos","isSubmited","setIsSubmited","emptyTodoTitle","emptyTodoUser","action","method","onSubmit","event","preventDefault","selectedUser","todoToAdd","Math","max","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b59e1a04.chunk.js","sourcesContent":["import { FormEvent, useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { FullTodo, Todo } from './types/Todo';\nimport { User } from './types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst prepareTodos = (\n  todos: Todo[],\n  users: User[],\n): FullTodo[] => (\n  todos.map(todo => ({\n    ...todo,\n    user: users.find((user) => user.id === todo.userId) || null,\n  }))\n);\n\nconst preparedTodos = prepareTodos(todosFromServer, usersFromServer);\n\nexport const App = () => {\n  const [todoTitle, setTodoTitle] = useState('');\n  const [selectedUserName, setSelectedUserName] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState(preparedTodos);\n  const [isSubmited, setIsSubmited] = useState(false);\n\n  const updateTodoList = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsSubmited(true);\n\n    const selectedUser = usersFromServer.find((user) => (\n      user.name === selectedUserName\n    ));\n\n    if (!selectedUser\n      || !selectedUserName\n      || !todoTitle) {\n      return;\n    }\n\n    const generatedId = Math.max(...visibleTodos.map((todo) => todo.id)) + 1;\n\n    const todoToAdd = {\n      id: generatedId,\n      title: todoTitle,\n      completed: false,\n      userId: selectedUser.id,\n      user: selectedUser || null,\n    };\n\n    setVisibleTodos([...visibleTodos, todoToAdd]);\n    setTodoTitle('');\n    setSelectedUserName('');\n    setIsSubmited(false);\n  };\n\n  const emptyTodoTitle = isSubmited && !todoTitle;\n  const emptyTodoUser = isSubmited && !selectedUserName;\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={updateTodoList}\n      >\n        <div className=\"field\">\n          <label>\n            Title:&nbsp;\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={todoTitle}\n              onChange={(event) => {\n                setTodoTitle(event.target.value);\n              }}\n            />\n          </label>\n          {emptyTodoTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:&nbsp;\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUserName}\n              onChange={(event) => {\n                setSelectedUserName(event.target.value);\n              }}\n            >\n              <option value=\"\" disabled>Choose a user</option>\n\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.name}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {emptyTodoUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { FullTodo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: FullTodo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const { id, completed, title } = todo;\n\n  return (\n    <article\n      data-id={id}\n      key={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n    </article>\n  );\n};\n","import { FullTodo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: FullTodo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}